// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fyralabs/id-server/ent/predicate"
	"github.com/fyralabs/id-server/ent/totpmethod"
	"github.com/fyralabs/id-server/ent/user"
	"github.com/google/uuid"
)

// TOTPMethodUpdate is the builder for updating TOTPMethod entities.
type TOTPMethodUpdate struct {
	config
	hooks    []Hook
	mutation *TOTPMethodMutation
}

// Where appends a list predicates to the TOTPMethodUpdate builder.
func (tmu *TOTPMethodUpdate) Where(ps ...predicate.TOTPMethod) *TOTPMethodUpdate {
	tmu.mutation.Where(ps...)
	return tmu
}

// SetSecret sets the "secret" field.
func (tmu *TOTPMethodUpdate) SetSecret(s string) *TOTPMethodUpdate {
	tmu.mutation.SetSecret(s)
	return tmu
}

// SetCreatedAt sets the "createdAt" field.
func (tmu *TOTPMethodUpdate) SetCreatedAt(t time.Time) *TOTPMethodUpdate {
	tmu.mutation.SetCreatedAt(t)
	return tmu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tmu *TOTPMethodUpdate) SetNillableCreatedAt(t *time.Time) *TOTPMethodUpdate {
	if t != nil {
		tmu.SetCreatedAt(*t)
	}
	return tmu
}

// SetLastUsedAt sets the "lastUsedAt" field.
func (tmu *TOTPMethodUpdate) SetLastUsedAt(t time.Time) *TOTPMethodUpdate {
	tmu.mutation.SetLastUsedAt(t)
	return tmu
}

// SetNillableLastUsedAt sets the "lastUsedAt" field if the given value is not nil.
func (tmu *TOTPMethodUpdate) SetNillableLastUsedAt(t *time.Time) *TOTPMethodUpdate {
	if t != nil {
		tmu.SetLastUsedAt(*t)
	}
	return tmu
}

// ClearLastUsedAt clears the value of the "lastUsedAt" field.
func (tmu *TOTPMethodUpdate) ClearLastUsedAt() *TOTPMethodUpdate {
	tmu.mutation.ClearLastUsedAt()
	return tmu
}

// SetName sets the "name" field.
func (tmu *TOTPMethodUpdate) SetName(s string) *TOTPMethodUpdate {
	tmu.mutation.SetName(s)
	return tmu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tmu *TOTPMethodUpdate) SetUserID(id uuid.UUID) *TOTPMethodUpdate {
	tmu.mutation.SetUserID(id)
	return tmu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (tmu *TOTPMethodUpdate) SetNillableUserID(id *uuid.UUID) *TOTPMethodUpdate {
	if id != nil {
		tmu = tmu.SetUserID(*id)
	}
	return tmu
}

// SetUser sets the "user" edge to the User entity.
func (tmu *TOTPMethodUpdate) SetUser(u *User) *TOTPMethodUpdate {
	return tmu.SetUserID(u.ID)
}

// Mutation returns the TOTPMethodMutation object of the builder.
func (tmu *TOTPMethodUpdate) Mutation() *TOTPMethodMutation {
	return tmu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tmu *TOTPMethodUpdate) ClearUser() *TOTPMethodUpdate {
	tmu.mutation.ClearUser()
	return tmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmu *TOTPMethodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tmu.hooks) == 0 {
		affected, err = tmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TOTPMethodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmu.mutation = mutation
			affected, err = tmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tmu.hooks) - 1; i >= 0; i-- {
			if tmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TOTPMethodUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TOTPMethodUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TOTPMethodUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tmu *TOTPMethodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   totpmethod.Table,
			Columns: totpmethod.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: totpmethod.FieldID,
			},
		},
	}
	if ps := tmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: totpmethod.FieldSecret,
		})
	}
	if value, ok := tmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: totpmethod.FieldCreatedAt,
		})
	}
	if value, ok := tmu.mutation.LastUsedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: totpmethod.FieldLastUsedAt,
		})
	}
	if tmu.mutation.LastUsedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: totpmethod.FieldLastUsedAt,
		})
	}
	if value, ok := tmu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: totpmethod.FieldName,
		})
	}
	if tmu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   totpmethod.UserTable,
			Columns: []string{totpmethod.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tmu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   totpmethod.UserTable,
			Columns: []string{totpmethod.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{totpmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TOTPMethodUpdateOne is the builder for updating a single TOTPMethod entity.
type TOTPMethodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TOTPMethodMutation
}

// SetSecret sets the "secret" field.
func (tmuo *TOTPMethodUpdateOne) SetSecret(s string) *TOTPMethodUpdateOne {
	tmuo.mutation.SetSecret(s)
	return tmuo
}

// SetCreatedAt sets the "createdAt" field.
func (tmuo *TOTPMethodUpdateOne) SetCreatedAt(t time.Time) *TOTPMethodUpdateOne {
	tmuo.mutation.SetCreatedAt(t)
	return tmuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tmuo *TOTPMethodUpdateOne) SetNillableCreatedAt(t *time.Time) *TOTPMethodUpdateOne {
	if t != nil {
		tmuo.SetCreatedAt(*t)
	}
	return tmuo
}

// SetLastUsedAt sets the "lastUsedAt" field.
func (tmuo *TOTPMethodUpdateOne) SetLastUsedAt(t time.Time) *TOTPMethodUpdateOne {
	tmuo.mutation.SetLastUsedAt(t)
	return tmuo
}

// SetNillableLastUsedAt sets the "lastUsedAt" field if the given value is not nil.
func (tmuo *TOTPMethodUpdateOne) SetNillableLastUsedAt(t *time.Time) *TOTPMethodUpdateOne {
	if t != nil {
		tmuo.SetLastUsedAt(*t)
	}
	return tmuo
}

// ClearLastUsedAt clears the value of the "lastUsedAt" field.
func (tmuo *TOTPMethodUpdateOne) ClearLastUsedAt() *TOTPMethodUpdateOne {
	tmuo.mutation.ClearLastUsedAt()
	return tmuo
}

// SetName sets the "name" field.
func (tmuo *TOTPMethodUpdateOne) SetName(s string) *TOTPMethodUpdateOne {
	tmuo.mutation.SetName(s)
	return tmuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tmuo *TOTPMethodUpdateOne) SetUserID(id uuid.UUID) *TOTPMethodUpdateOne {
	tmuo.mutation.SetUserID(id)
	return tmuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (tmuo *TOTPMethodUpdateOne) SetNillableUserID(id *uuid.UUID) *TOTPMethodUpdateOne {
	if id != nil {
		tmuo = tmuo.SetUserID(*id)
	}
	return tmuo
}

// SetUser sets the "user" edge to the User entity.
func (tmuo *TOTPMethodUpdateOne) SetUser(u *User) *TOTPMethodUpdateOne {
	return tmuo.SetUserID(u.ID)
}

// Mutation returns the TOTPMethodMutation object of the builder.
func (tmuo *TOTPMethodUpdateOne) Mutation() *TOTPMethodMutation {
	return tmuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tmuo *TOTPMethodUpdateOne) ClearUser() *TOTPMethodUpdateOne {
	tmuo.mutation.ClearUser()
	return tmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmuo *TOTPMethodUpdateOne) Select(field string, fields ...string) *TOTPMethodUpdateOne {
	tmuo.fields = append([]string{field}, fields...)
	return tmuo
}

// Save executes the query and returns the updated TOTPMethod entity.
func (tmuo *TOTPMethodUpdateOne) Save(ctx context.Context) (*TOTPMethod, error) {
	var (
		err  error
		node *TOTPMethod
	)
	if len(tmuo.hooks) == 0 {
		node, err = tmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TOTPMethodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmuo.mutation = mutation
			node, err = tmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tmuo.hooks) - 1; i >= 0; i-- {
			if tmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TOTPMethodUpdateOne) SaveX(ctx context.Context) *TOTPMethod {
	node, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmuo *TOTPMethodUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TOTPMethodUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tmuo *TOTPMethodUpdateOne) sqlSave(ctx context.Context) (_node *TOTPMethod, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   totpmethod.Table,
			Columns: totpmethod.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: totpmethod.FieldID,
			},
		},
	}
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TOTPMethod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, totpmethod.FieldID)
		for _, f := range fields {
			if !totpmethod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != totpmethod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmuo.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: totpmethod.FieldSecret,
		})
	}
	if value, ok := tmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: totpmethod.FieldCreatedAt,
		})
	}
	if value, ok := tmuo.mutation.LastUsedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: totpmethod.FieldLastUsedAt,
		})
	}
	if tmuo.mutation.LastUsedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: totpmethod.FieldLastUsedAt,
		})
	}
	if value, ok := tmuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: totpmethod.FieldName,
		})
	}
	if tmuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   totpmethod.UserTable,
			Columns: []string{totpmethod.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tmuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   totpmethod.UserTable,
			Columns: []string{totpmethod.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TOTPMethod{config: tmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{totpmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
