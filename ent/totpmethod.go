// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fyralabs/id-server/ent/totpmethod"
	"github.com/fyralabs/id-server/ent/user"
	"github.com/google/uuid"
)

// TOTPMethod is the model entity for the TOTPMethod schema.
type TOTPMethod struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret string `json:"secret,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// LastUsedAt holds the value of the "lastUsedAt" field.
	LastUsedAt time.Time `json:"lastUsedAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TOTPMethodQuery when eager-loading is set.
	Edges             TOTPMethodEdges `json:"edges"`
	user_totp_methods *uuid.UUID
}

// TOTPMethodEdges holds the relations/edges for other nodes in the graph.
type TOTPMethodEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TOTPMethodEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TOTPMethod) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case totpmethod.FieldSecret, totpmethod.FieldName:
			values[i] = new(sql.NullString)
		case totpmethod.FieldCreatedAt, totpmethod.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		case totpmethod.FieldID:
			values[i] = new(uuid.UUID)
		case totpmethod.ForeignKeys[0]: // user_totp_methods
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TOTPMethod", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TOTPMethod fields.
func (tm *TOTPMethod) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case totpmethod.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tm.ID = *value
			}
		case totpmethod.FieldSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				tm.Secret = value.String
			}
		case totpmethod.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				tm.CreatedAt = value.Time
			}
		case totpmethod.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastUsedAt", values[i])
			} else if value.Valid {
				tm.LastUsedAt = value.Time
			}
		case totpmethod.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tm.Name = value.String
			}
		case totpmethod.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_totp_methods", values[i])
			} else if value.Valid {
				tm.user_totp_methods = new(uuid.UUID)
				*tm.user_totp_methods = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the TOTPMethod entity.
func (tm *TOTPMethod) QueryUser() *UserQuery {
	return (&TOTPMethodClient{config: tm.config}).QueryUser(tm)
}

// Update returns a builder for updating this TOTPMethod.
// Note that you need to call TOTPMethod.Unwrap() before calling this method if this TOTPMethod
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TOTPMethod) Update() *TOTPMethodUpdateOne {
	return (&TOTPMethodClient{config: tm.config}).UpdateOne(tm)
}

// Unwrap unwraps the TOTPMethod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tm *TOTPMethod) Unwrap() *TOTPMethod {
	tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("ent: TOTPMethod is not a transactional entity")
	}
	tm.config.driver = tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TOTPMethod) String() string {
	var builder strings.Builder
	builder.WriteString("TOTPMethod(")
	builder.WriteString(fmt.Sprintf("id=%v", tm.ID))
	builder.WriteString(", secret=")
	builder.WriteString(tm.Secret)
	builder.WriteString(", createdAt=")
	builder.WriteString(tm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", lastUsedAt=")
	builder.WriteString(tm.LastUsedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(tm.Name)
	builder.WriteByte(')')
	return builder.String()
}

// TOTPMethods is a parsable slice of TOTPMethod.
type TOTPMethods []*TOTPMethod

func (tm TOTPMethods) config(cfg config) {
	for _i := range tm {
		tm[_i].config = cfg
	}
}
