// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldEmailVerified holds the string denoting the emailverified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldAvatarURL holds the string denoting the avatarurl field in the database.
	FieldAvatarURL = "avatar_url"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeTotpMethods holds the string denoting the totpmethods edge name in mutations.
	EdgeTotpMethods = "totpMethods"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "user_sessions"
	// TotpMethodsTable is the table that holds the totpMethods relation/edge.
	TotpMethodsTable = "totp_methods"
	// TotpMethodsInverseTable is the table name for the TOTPMethod entity.
	// It exists in this package in order to avoid circular dependency with the "totpmethod" package.
	TotpMethodsInverseTable = "totp_methods"
	// TotpMethodsColumn is the table column denoting the totpMethods relation/edge.
	TotpMethodsColumn = "user_totp_methods"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldCreatedAt,
	FieldEmailVerified,
	FieldAvatarURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultEmailVerified holds the default value on creation for the "emailVerified" field.
	DefaultEmailVerified bool
)
